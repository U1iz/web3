#region 程序集 UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UnityEngine.Physics2DModule.dll
#endregion

using System.Collections.Generic;
using UnityEngine.Internal;

namespace UnityEngine
{
    //
    // 摘要:
    //     Parent class for collider types used with 2D gameplay.
    [NativeHeaderAttribute("Modules/Physics2D/Public/Collider2D.h")]
    [RequireComponent(typeof(Transform))]
    [RequiredByNativeCodeAttribute(Optional = true)]
    public class Collider2D : Behaviour
    {
        public Collider2D();

        //
        // 摘要:
        //     Get the bounciness used by the collider.
        public float bounciness { get; }
        //
        // 摘要:
        //     Get the friction used by the collider.
        public float friction { get; }
        //
        // 摘要:
        //     The density of the collider used to calculate its mass (when auto mass is enabled).
        public float density { get; set; }
        //
        // 摘要:
        //     Whether the collider is used by an attached effector or not.
        public bool usedByEffector { get; set; }
        //
        // 摘要:
        //     Sets whether the Collider will be used or not used by a CompositeCollider2D.
        public bool usedByComposite { get; set; }
        //
        // 摘要:
        //     Is this collider configured as a trigger?
        public bool isTrigger { get; set; }
        //
        // 摘要:
        //     The local offset of the collider geometry.
        public Vector2 offset { get; set; }
        //
        // 摘要:
        //     The Rigidbody2D attached to the Collider2D.
        public Rigidbody2D attachedRigidbody { get; }
        //
        // 摘要:
        //     The number of separate shaped regions in the collider.
        public int shapeCount { get; }
        //
        // 摘要:
        //     The world space bounding area of the collider.
        public Bounds bounds { get; }
        //
        // 摘要:
        //     The PhysicsMaterial2D that is applied to this collider.
        public PhysicsMaterial2D sharedMaterial { get; set; }
        //
        // 摘要:
        //     Get the CompositeCollider2D that is available to be attached to the collider.
        public CompositeCollider2D composite { get; }

        [ExcludeFromDocs]
        public int Cast(Vector2 direction, RaycastHit2D[] results, float distance);
        public int Cast(Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, [DefaultValue("Mathf.Infinity")] float distance = float.PositiveInfinity, [DefaultValue("true")] bool ignoreSiblingColliders = true);
        //
        // 摘要:
        //     Casts the Collider shape into the Scene starting at the Collider position ignoring
        //     the Collider itself.
        //
        // 参数:
        //   direction:
        //     Vector representing the direction to cast the shape.
        //
        //   contactFilter:
        //     Filter results defined by the contact filter.
        //
        //   results:
        //     Array to receive results.
        //
        //   distance:
        //     Maximum distance over which to cast the shape.
        //
        //   ignoreSiblingColliders:
        //     Determines whether the cast should ignore Colliders attached to the same Rigidbody2D
        //     (known as sibling Colliders).
        //
        // 返回结果:
        //     The number of results returned.
        public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, [DefaultValue("Mathf.Infinity")] float distance, [DefaultValue("true")] bool ignoreSiblingColliders);
        [ExcludeFromDocs]
        public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results);
        //
        // 摘要:
        //     Casts the Collider shape into the Scene starting at the Collider position ignoring
        //     the Collider itself.
        //
        // 参数:
        //   direction:
        //     Vector representing the direction to cast the shape.
        //
        //   results:
        //     Array to receive results.
        //
        //   distance:
        //     Maximum distance over which to cast the shape.
        //
        //   ignoreSiblingColliders:
        //     Determines whether the cast should ignore Colliders attached to the same Rigidbody2D
        //     (known as sibling Colliders).
        //
        // 返回结果:
        //     The number of results returned.
        public int Cast(Vector2 direction, RaycastHit2D[] results, [DefaultValue("Mathf.Infinity")] float distance, [DefaultValue("true")] bool ignoreSiblingColliders);
        [ExcludeFromDocs]
        public int Cast(Vector2 direction, RaycastHit2D[] results);
        [ExcludeFromDocs]
        public int Cast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance);
        //
        // 摘要:
        //     Returns a point on the perimeter of this Collider that is closest to the specified
        //     position.
        //
        // 参数:
        //   position:
        //     The position from which to find the closest point on this Collider.
        //
        // 返回结果:
        //     A point on the perimeter of this Collider that is closest to the specified position.
        public Vector2 ClosestPoint(Vector2 position);
        //
        // 摘要:
        //     Creates a planar Mesh that is identical to the area defined by the Collider2D
        //     geometry.
        //
        // 参数:
        //   useBodyPosition:
        //     Should the mesh be transformed by the position of the attached Rigidbody2D?
        //
        //   useBodyRotation:
        //     Should the mesh be transformed by the rotation of the attached Rigidbody2D?
        //
        // 返回结果:
        //     The planar Mesh created that matches the collider geometry or NULL if no Mesh
        //     could be created.
        [NativeMethodAttribute("CreateMesh_Binding")]
        public Mesh CreateMesh(bool useBodyPosition, bool useBodyRotation);
        //
        // 摘要:
        //     Calculates the minimum separation of this collider against another collider.
        //
        // 参数:
        //   collider:
        //     A collider used to calculate the minimum separation against this collider.
        //
        // 返回结果:
        //     The minimum separation of collider and this collider.
        public ColliderDistance2D Distance([WritableAttribute] Collider2D collider);
        //
        // 摘要:
        //     Retrieves all contact points for this Collider.
        //
        // 参数:
        //   contacts:
        //     An array of ContactPoint2D used to receive the results.
        //
        // 返回结果:
        //     Returns the number of contacts placed in the contacts array.
        public int GetContacts(ContactPoint2D[] contacts);
        public int GetContacts(ContactFilter2D contactFilter, List<Collider2D> colliders);
        //
        // 摘要:
        //     Retrieves all colliders in contact with this Collider, with the results filtered
        //     by the contactFilter.
        //
        // 参数:
        //   contactFilter:
        //     The contact filter used to filter the results differently, such as by layer mask,
        //     Z depth, or normal angle.
        //
        //   colliders:
        //     An array of Collider2D used to receive the results.
        //
        // 返回结果:
        //     Returns the number of colliders placed in the colliders array.
        public int GetContacts(ContactFilter2D contactFilter, Collider2D[] colliders);
        //
        // 摘要:
        //     Retrieves all contact points for this Collider, with the results filtered by
        //     the contactFilter.
        //
        // 参数:
        //   contactFilter:
        //     The contact filter used to filter the results differently, such as by layer mask,
        //     Z depth, or normal angle.
        //
        //   contacts:
        //     An array of ContactPoint2D used to receive the results.
        //
        // 返回结果:
        //     Returns the number of contacts placed in the contacts array.
        public int GetContacts(ContactFilter2D contactFilter, ContactPoint2D[] contacts);
        public int GetContacts(ContactFilter2D contactFilter, List<ContactPoint2D> contacts);
        //
        // 摘要:
        //     Retrieves all colliders in contact with this Collider.
        //
        // 参数:
        //   colliders:
        //     An array of Collider2D used to receive the results.
        //
        // 返回结果:
        //     Returns the number of contacts placed in the colliders array.
        public int GetContacts(Collider2D[] colliders);
        public int GetContacts(List<ContactPoint2D> contacts);
        public int GetContacts(List<Collider2D> colliders);
        //
        // 摘要:
        //     Generates a simple hash value based upon the geometry of the Collider2D.
        //
        // 返回结果:
        //     A hash value that uniquely identifies the configured geometry of the Collider2D.
        [NativeMethodAttribute("GetShapeHash_Binding")]
        public uint GetShapeHash();
        //
        // 摘要:
        //     Check whether this collider is touching the collider or not.
        //
        // 参数:
        //   collider:
        //     The collider to check if it is touching this collider.
        //
        // 返回结果:
        //     Whether this collider is touching the collider or not.
        public bool IsTouching([NotNullAttribute("ArgumentNullException")][WritableAttribute] Collider2D collider);
        //
        // 摘要:
        //     Check whether this collider is touching the collider or not with the results
        //     filtered by the contactFilter.
        //
        // 参数:
        //   collider:
        //     The collider to check if it is touching this collider.
        //
        //   contactFilter:
        //     The contact filter used to filter the results differently, such as by layer mask,
        //     Z depth, or normal angle.
        //
        // 返回结果:
        //     Whether this collider is touching the collider or not.
        public bool IsTouching([WritableAttribute] Collider2D collider, ContactFilter2D contactFilter);
        //
        // 摘要:
        //     Check whether this collider is touching other colliders or not with the results
        //     filtered by the contactFilter.
        //
        // 参数:
        //   contactFilter:
        //     The contact filter used to filter the results differently, such as by layer mask,
        //     Z depth, or normal angle.
        //
        // 返回结果:
        //     Whether this collider is touching the collider or not.
        public bool IsTouching(ContactFilter2D contactFilter);
        [ExcludeFromDocs]
        public bool IsTouchingLayers();
        //
        // 摘要:
        //     Checks whether this collider is touching any colliders on the specified layerMask
        //     or not.
        //
        // 参数:
        //   layerMask:
        //     Any colliders on any of these layers count as touching.
        //
        // 返回结果:
        //     Whether this collider is touching any collider on the specified layerMask or
        //     not.
        public bool IsTouchingLayers([DefaultValue("Physics2D.AllLayers")] int layerMask);
        public int OverlapCollider(ContactFilter2D contactFilter, List<Collider2D> results);
        //
        // 摘要:
        //     Get a list of all colliders that overlap this collider.
        //
        // 参数:
        //   contactFilter:
        //     The contact filter used to filter the results differently, such as by layer mask,
        //     Z depth. Note that normal angle is not used for overlap testing.
        //
        //   results:
        //     The array to receive results. The size of the array determines the maximum number
        //     of results that can be returned.
        //
        // 返回结果:
        //     Returns the number of results placed in the results array.
        public int OverlapCollider(ContactFilter2D contactFilter, Collider2D[] results);
        //
        // 摘要:
        //     Check if a collider overlaps a point in space.
        //
        // 参数:
        //   point:
        //     A point in world space.
        //
        // 返回结果:
        //     Does point overlap the collider?
        public bool OverlapPoint(Vector2 point);
        [ExcludeFromDocs]
        public int Raycast(Vector2 direction, RaycastHit2D[] results);
        [ExcludeFromDocs]
        public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results);
        //
        // 摘要:
        //     Casts a ray into the Scene that starts at the Collider position and ignores the
        //     Collider itself.
        //
        // 参数:
        //   direction:
        //     Vector representing the direction of the ray.
        //
        //   results:
        //     Array to receive results.
        //
        //   distance:
        //     Maximum distance over which to cast the ray.
        //
        //   layerMask:
        //     Filter to check objects only on specific layers.
        //
        //   minDepth:
        //     Only include objects with a Z coordinate (depth) greater than this value.
        //
        //   maxDepth:
        //     Only include objects with a Z coordinate (depth) less than this value.
        //
        //   contactFilter:
        //     Filter results defined by the contact filter.
        //
        // 返回结果:
        //     The number of results returned.
        public int Raycast(Vector2 direction, RaycastHit2D[] results, [DefaultValue("Mathf.Infinity")] float distance, [DefaultValue("Physics2D.AllLayers")] int layerMask, [DefaultValue("-Mathf.Infinity")] float minDepth, [DefaultValue("Mathf.Infinity")] float maxDepth);
        [ExcludeFromDocs]
        public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth);
        [ExcludeFromDocs]
        public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance, int layerMask);
        [ExcludeFromDocs]
        public int Raycast(Vector2 direction, RaycastHit2D[] results, float distance);
        //
        // 摘要:
        //     Casts a ray into the Scene that starts at the Collider position and ignores the
        //     Collider itself.
        //
        // 参数:
        //   direction:
        //     Vector representing the direction of the ray.
        //
        //   results:
        //     Array to receive results.
        //
        //   distance:
        //     Maximum distance over which to cast the ray.
        //
        //   layerMask:
        //     Filter to check objects only on specific layers.
        //
        //   minDepth:
        //     Only include objects with a Z coordinate (depth) greater than this value.
        //
        //   maxDepth:
        //     Only include objects with a Z coordinate (depth) less than this value.
        //
        //   contactFilter:
        //     Filter results defined by the contact filter.
        //
        // 返回结果:
        //     The number of results returned.
        public int Raycast(Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, [DefaultValue("Mathf.Infinity")] float distance);
        public int Raycast(Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, [DefaultValue("Mathf.Infinity")] float distance = float.PositiveInfinity);
    }
}